import{_ as t,o as e,c as a,R as r}from"./chunks/framework.NgU0Zsry.js";const u=JSON.parse('{"title":"什么是 TypeScript","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md","lastUpdated":1702260677000}'),p={name:"guide/introduction.md"},i=r('<h1 id="什么是-typescript" tabindex="-1">什么是 TypeScript <a class="header-anchor" href="#什么是-typescript" aria-label="Permalink to &quot;什么是 TypeScript&quot;">​</a></h1><p>关于 TypeScript，<a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">Microsoft TypeScript</a> 官网的定义如下：</p><blockquote><p>Typed JavaScript at Any Scale.</p><p>添加了类型系统的 JavaScript，适用于任何规模的项目。</p></blockquote><p>总结为以下两点：</p><ul><li>类型系统</li><li>适用于任何规模的项目（尤其是中大型项目尽量使用 TypeScript）</li></ul><p>也就是说，TypeScript 包含 JavaScript 的所有特性，并在 JavaScript 的基础上添加了类型系统，便于管理大型项目</p><h2 id="语言类型" tabindex="-1">语言类型 <a class="header-anchor" href="#语言类型" aria-label="Permalink to &quot;语言类型&quot;">​</a></h2><p>众所周知，JavaScript 是一门动态类型、弱类型、解释型的编程语言</p><p>TypeScript 作为 JavaScript 的超集，自然也继承了 JavaScript 的这些特性，吗？</p><p>事实并不是这样。事实上，TypeScript 由于添加了类型系统，它变得可以管理和固定变量的类型，因此 TypeScript 是<strong>静态类型</strong>的编程语言。这也就是为什么强烈建议在大型项目中使用 TypeScript 的原因</p><p>TypeScript 并不能直接由浏览器解释执行，而是需要经由 TypeScript 编译器编译为 JavaScript 之后，再由浏览器解释执行。因此，TypeScript 是一门<strong>编译型语言</strong></p><h2 id="类型系统" tabindex="-1">类型系统 <a class="header-anchor" href="#类型系统" aria-label="Permalink to &quot;类型系统&quot;">​</a></h2>',12),c=[i];function o(n,s,l,d,S,_){return e(),a("div",null,c)}const T=t(p,[["render",o]]);export{u as __pageData,T as default};
